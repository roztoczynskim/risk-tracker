import os
import aiosmtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from . import models

async def send_date_change_request(epic: models.Epic, reason: str, proposed_date: str = None):
    """Send email request for epic date change to manager."""
    
    # Email configuration from environment variables
    smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
    smtp_port = int(os.getenv("SMTP_PORT", "587"))
    smtp_username = os.getenv("SMTP_USERNAME")
    smtp_password = os.getenv("SMTP_PASSWORD")
    manager_email = os.getenv("MANAGER_EMAIL")
    sender_email = os.getenv("SENDER_EMAIL", "noreply@risktracker.com")
    
    if not all([smtp_username, smtp_password, manager_email]):
        raise Exception("Email configuration incomplete. Please set SMTP_USERNAME, SMTP_PASSWORD, and MANAGER_EMAIL environment variables.")
    
    # Create email content
    subject = f"Date Change Request for Epic: {epic.title}"
    
    # Build email body
    body_lines = [
        f"Date Change Request",
        f"==================",
        f"",
        f"Epic Title: {epic.title}",
        f"Current Target Launch Date: {epic.target_launch_date or 'Not set'}",
        f"Proposed New Target Launch Date: {proposed_date or 'To be determined'}",
        f"",
        f"Reason for Change:",
        f"{reason}",
        f"",
        f"Associated Risks:",
    ]
    
    # Add risks information
    if epic.risks:
        for risk in epic.risks:
            if risk.status in ["Open", "Mitigating"]:  # Only include active risks
                body_lines.append(f"â€¢ Risk: {risk.description}")
                body_lines.append(f"  Status: {risk.status}")
                if risk.mitigation_plan:
                    body_lines.append(f"  Mitigation: {risk.mitigation_plan}")
                body_lines.append("")
    else:
        body_lines.append("No active risks associated with this epic.")
    
    body_lines.extend([
        "",
        "Please review and approve/reject this date change request.",
        "",
        "Generated by Risk Tracker Application"
    ])
    
    body = "\n".join(body_lines)
    
    # Create email message
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = manager_email
    message["Subject"] = subject
    message.attach(MIMEText(body, "plain"))
    
    # Send email
    try:
        await aiosmtplib.send(
            message,
            hostname=smtp_server,
            port=smtp_port,
            start_tls=True,
            username=smtp_username,
            password=smtp_password,
        )
    except Exception as e:
        raise Exception(f"Failed to send email: {str(e)}") 